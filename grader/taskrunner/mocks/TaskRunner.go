// Code generated by mockery v1.0.0
package mocks

import (
	language "github.com/sandykarunia/fudge/language"
	mock "github.com/stretchr/testify/mock"

	sandbox "github.com/sandykarunia/fudge/sandbox"
)

// TaskRunner is an autogenerated mock type for the TaskRunner type
type TaskRunner struct {
	mock.Mock
}

// CompileCode provides a mock function with given fields: sb, filename, lang
func (_m *TaskRunner) CompileCode(sb sandbox.Sandbox, filename string, lang language.Language) (string, error) {
	ret := _m.Called(sb, filename, lang)

	var r0 string
	if rf, ok := ret.Get(0).(func(sandbox.Sandbox, string, language.Language) string); ok {
		r0 = rf(sb, filename, lang)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sandbox.Sandbox, string, language.Language) error); ok {
		r1 = rf(sb, filename, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareSandbox provides a mock function with given fields:
func (_m *TaskRunner) PrepareSandbox() (sandbox.Sandbox, error) {
	ret := _m.Called()

	var r0 sandbox.Sandbox
	if rf, ok := ret.Get(0).(func() sandbox.Sandbox); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sandbox.Sandbox)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareSubmissionCode provides a mock function with given fields: sb, submissionCode
func (_m *TaskRunner) PrepareSubmissionCode(sb sandbox.Sandbox, submissionCode string) (string, error) {
	ret := _m.Called(sb, submissionCode)

	var r0 string
	if rf, ok := ret.Get(0).(func(sandbox.Sandbox, string) string); ok {
		r0 = rf(sb, submissionCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sandbox.Sandbox, string) error); ok {
		r1 = rf(sb, submissionCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
